{"version":3,"sources":["App.js","index.js"],"names":["convertTimer","duration","minutes","parseInt","seconds","Settings","breakDuration","sessionDuration","updateSessionDuration","updateBreakDuration","className","DurationControl","type","updateTimer","Timer","timerActive","togglePlay","timerDisplay","isBreak","reset","id","onClick","App","useState","setBreakDuration","setSessionDuration","setTimerActive","setTimerDisplay","currentTimer","setCurrentTimer","setIsBreak","timerAudio","useRef","useEffect","timerInterval","startTime","Date","now","setInterval","elapseTime","Math","floor","current","play","clearInterval","pause","currentTime","preload","src","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60594cd5.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.scss';\n\nconst convertTimer = (duration) => {\n  let minutes = parseInt(duration / 60, 10)\n  let seconds = parseInt(duration % 60, 10)\n\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n  return `${minutes}:${seconds}`\n}\n\nfunction App() {\n  const [breakDuration, setBreakDuration] = useState(5)\n  const [sessionDuration, setSessionDuration] = useState(25)\n  const [timerActive, setTimerActive] = useState(false)\n  const [timerDisplay, setTimerDisplay] = useState(convertTimer(sessionDuration * 60))\n  const [currentTimer, setCurrentTimer] = useState(sessionDuration * 60)\n  const [isBreak, setIsBreak] = useState(false)\n\n  const updateSessionDuration = minutes => {\n    if (sessionDuration <= 1 || sessionDuration >= 60 ) return false;\n    setSessionDuration(minutes)\n    if(timerActive) return false;\n    setTimerDisplay(convertTimer(minutes * 60))\n    setCurrentTimer(minutes * 60)\n  }\n\n  const updateBreakDuration = minutes => {\n    if (breakDuration <= 1 || breakDuration >= 60) return false;\n    setBreakDuration(minutes)\n  }\n\n  const togglePlay = () => {\n    setTimerActive(!timerActive)\n  }\n\n  const timerAudio = useRef()\n\n  const reset = () => {\n    setBreakDuration(5)\n    setSessionDuration(25)\n    setTimerActive(false)\n    setCurrentTimer(25 * 60)\n    setTimerDisplay(convertTimer(25 * 60))\n    setIsBreak(false)\n    timerAudio.current.pause()\n    timerAudio.current.currentTime = 0\n  }\n\n  useEffect(() => {\n    let timerInterval = null\n    if(timerActive && currentTimer >= 0) {\n      let startTime = Date.now()\n      timerInterval = setInterval(() => {\n        let elapseTime = Math.floor((Date.now() - startTime)/ 1000) ;\n        setTimerDisplay(convertTimer(currentTimer))\n      \n        setCurrentTimer( currentTimer => currentTimer - elapseTime)\n        if (currentTimer <= 0) {\n          setIsBreak(!isBreak)\n          isBreak ? setCurrentTimer(sessionDuration * 60) : setCurrentTimer(breakDuration * 60)\n          timerAudio.current.play()\n        }\n      }, 100)\n    } else if (!timerActive) {\n      clearInterval(timerInterval)\n    }\n    return () => clearInterval(timerInterval)\n  }, [timerActive, timerDisplay, sessionDuration, currentTimer, breakDuration, isBreak])\n\n  return (\n    <div className=\"App\">\n      <div className=\"pomodoro-clock\">\n        <Settings \n          breakDuration={breakDuration} \n          sessionDuration={sessionDuration} \n          updateSessionDuration={updateSessionDuration} updateBreakDuration={updateBreakDuration}\n        />\n        <Timer \n          timerActive={timerActive}\n          togglePlay={togglePlay}\n          timerDisplay={timerDisplay}\n          isBreak={isBreak}\n          reset={reset}\n        />\n        <audio id=\"beep\" preload=\"auto\"\n          src=\"https://goo.gl/65cBl1\"\n          ref={timerAudio}\n       />\n      </div>\n    </div>\n  );\n}\n\nfunction Settings({ breakDuration, sessionDuration, updateSessionDuration, updateBreakDuration }) {\n  return (\n    <div className=\"settings\">\n      <DurationControl type=\"break\" duration={breakDuration} updateTimer={updateBreakDuration}  />\n      <DurationControl type=\"session\" duration={sessionDuration} updateTimer={updateSessionDuration} />\n    </div>\n  );\n}\n\nfunction Timer({timerActive, togglePlay, timerDisplay, isBreak, reset}) {\n  return (\n    <div className=\"timer\">\n      <div id=\"timer-label\">{ isBreak ? 'Break' : 'Session' }</div>\n      <div id=\"time-left\">{ timerDisplay }</div>\n      <div className=\"timer-control\">\n        <button id=\"start_stop\" onClick={() => togglePlay()}>{ timerActive ? 'Pause' : 'Play'}</button>\n        <button id=\"reset\" onClick={() => reset()}>Reset</button>\n      </div>\n    </div>\n  )\n}\n\nfunction DurationControl({ type, duration, updateTimer }) {\n  \n  return (\n    <div className={`${type} duration`}>\n      <div id={`${type}-label`} className=\"label\">{type} Length</div>\n      <div className=\"duration-control\">\n        <button id={`${type}-decrement`} onClick={() => updateTimer(duration - 1)}>-</button>\n        <div id={`${type}-length`}>{duration}</div>\n        <button id={`${type}-increment`} onClick={() => updateTimer(duration + 1)}>+</button>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}